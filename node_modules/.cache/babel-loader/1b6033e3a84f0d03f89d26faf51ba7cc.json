{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\OUP\\\\React\\\\hackernews-react-apollo\\\\src\\\\components\\\\LinkList.js\";\nimport React, { Component, Fragment } from 'react';\nimport Link from './Link';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { LINKS_PER_PAGE } from '../constants';\nexport const FEED_QUERY = gql`\n  query FeedQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n    feed(first: $first, skip: $skip, orderBy: $orderBy) {\n      links {\n        id\n        createdAt\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      count\n    }\n  }\n`;\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`;\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n\nclass LinkList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._updateCacheAfterVote = (store, createVote, linkId) => {\n      const isNewPage = this.props.location.pathname.includes('new');\n      const page = parseInt(this.props.match.params.page, 10);\n      const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n      const first = isNewPage ? LINKS_PER_PAGE : 100;\n      const orderBy = isNewPage ? 'createdAt_DESC' : null;\n      const data = store.readQuery({\n        query: FEED_QUERY,\n        variables: {\n          first,\n          skip,\n          orderBy\n        }\n      });\n      const votedLink = data.feed.links.find(link => link.id === linkId);\n      votedLink.votes = createVote.link.votes;\n      store.writeQuery({\n        query: FEED_QUERY,\n        data\n      });\n    };\n\n    this._subscribeToNewLinks = subscribeToMore => {\n      subscribeToMore({\n        document: NEW_LINKS_SUBSCRIPTION,\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const newLink = subscriptionData.data.newLink;\n          const exists = prev.feed.links.find(({\n            id\n          }) => id === newLink.id);\n          if (exists) return prev;\n          return Object.assign({}, prev, {\n            feed: {\n              links: [newLink, ...prev.feed.links],\n              count: prev.feed.links.length + 1,\n              __typename: prev.feed.__typename\n            }\n          });\n        }\n      });\n    };\n\n    this._subscribeToNewVotes = subscribeToMore => {\n      subscribeToMore({\n        document: NEW_VOTES_SUBSCRIPTION\n      });\n    };\n\n    this._nextPage = data => {\n      const page = parseInt(this.props.match.params.page, 10);\n\n      if (page <= data.feed.count / LINKS_PER_PAGE) {\n        const nextPage = page + 1;\n        this.props.history.push(`/new/${nextPage}`);\n      }\n    };\n\n    this._previousPage = () => {\n      const page = parseInt(this.props.match.params.page, 10);\n\n      if (page > 1) {\n        const previousPage = page - 1;\n        this.props.history.push(`/new/${previousPage}`);\n      }\n    };\n\n    this._getQueryVariables = () => {\n      const isNewPage = this.props.location.pathname.includes('new');\n      const page = parseInt(this.props.match.params.page, 10);\n      const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n      const first = isNewPage ? LINKS_PER_PAGE : 100;\n      const orderBy = isNewPage ? 'createdAt_DESC' : null;\n      return {\n        first,\n        skip,\n        orderBy\n      };\n    };\n\n    this._getLinksToRender = data => {\n      const isNewPage = this.props.location.pathname.includes('new');\n\n      if (isNewPage) {\n        return data.feed.links;\n      }\n\n      const rankedLinks = data.feed.links.slice();\n      rankedLinks.sort((l1, l2) => l2.votes.length - l1.votes.length);\n      return rankedLinks;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Query, {\n      query: FEED_QUERY,\n      variables: this._getQueryVariables(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, ({\n      loading,\n      error,\n      data,\n      subscribeToMore\n    }) => {\n      if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 31\n        }\n      }, \"Fetching\");\n      if (error) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }\n      }, \"Error\");\n\n      this._subscribeToNewLinks(subscribeToMore);\n\n      this._subscribeToNewVotes(subscribeToMore);\n\n      const linksToRender = this._getLinksToRender(data);\n\n      const isNewPage = this.props.location.pathname.includes('new');\n      const pageIndex = this.props.match.params.page ? (this.props.match.params.page - 1) * LINKS_PER_PAGE : 0;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }\n      }, linksToRender.map((link, index) => /*#__PURE__*/React.createElement(Link, {\n        key: link.id,\n        link: link,\n        index: index + pageIndex,\n        updateStoreAfterVote: this._updateCacheAfterVote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }\n      })), isNewPage && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex ml4 mv3 gray\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pointer mr2\",\n        onClick: this._previousPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 19\n        }\n      }, \"Previous\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pointer\",\n        onClick: () => this._nextPage(data),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 19\n        }\n      }, \"Next\")));\n    });\n  }\n\n}\n\nexport default LinkList;","map":{"version":3,"sources":["E:/Project/OUP/React/hackernews-react-apollo/src/components/LinkList.js"],"names":["React","Component","Fragment","Link","Query","gql","LINKS_PER_PAGE","FEED_QUERY","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","LinkList","_updateCacheAfterVote","store","createVote","linkId","isNewPage","props","location","pathname","includes","page","parseInt","match","params","skip","first","orderBy","data","readQuery","query","variables","votedLink","feed","links","find","link","id","votes","writeQuery","_subscribeToNewLinks","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","exists","Object","assign","count","length","__typename","_subscribeToNewVotes","_nextPage","nextPage","history","push","_previousPage","previousPage","_getQueryVariables","_getLinksToRender","rankedLinks","slice","sort","l1","l2","render","loading","error","linksToRender","pageIndex","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,MAAMC,UAAU,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;CAAvB;AAwBP,MAAMG,sBAAsB,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;CAAnC;AAqBA,MAAMI,sBAAsB,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;CAAnC;;AA0BA,MAAMK,QAAN,SAAuBT,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAC/BU,qBAD+B,GACP,CAACC,KAAD,EAAQC,UAAR,EAAoBC,MAApB,KAA+B;AACrD,YAAMC,SAAS,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BC,QAA7B,CAAsC,KAAtC,CAAlB;AACA,YAAMC,IAAI,GAAGC,QAAQ,CAAC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBH,IAAzB,EAA+B,EAA/B,CAArB;AAEA,YAAMI,IAAI,GAAGT,SAAS,GAAG,CAACK,IAAI,GAAG,CAAR,IAAad,cAAhB,GAAiC,CAAvD;AACA,YAAMmB,KAAK,GAAGV,SAAS,GAAGT,cAAH,GAAoB,GAA3C;AACA,YAAMoB,OAAO,GAAGX,SAAS,GAAG,gBAAH,GAAsB,IAA/C;AACA,YAAMY,IAAI,GAAGf,KAAK,CAACgB,SAAN,CAAgB;AAC3BC,QAAAA,KAAK,EAAEtB,UADoB;AAE3BuB,QAAAA,SAAS,EAAE;AAAEL,UAAAA,KAAF;AAASD,UAAAA,IAAT;AAAeE,UAAAA;AAAf;AAFgB,OAAhB,CAAb;AAKA,YAAMK,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAAV,CAAgBC,IAAhB,CAAqBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYtB,MAAzC,CAAlB;AACAiB,MAAAA,SAAS,CAACM,KAAV,GAAkBxB,UAAU,CAACsB,IAAX,CAAgBE,KAAlC;AAEAzB,MAAAA,KAAK,CAAC0B,UAAN,CAAiB;AAAET,QAAAA,KAAK,EAAEtB,UAAT;AAAqBoB,QAAAA;AAArB,OAAjB;AACD,KAjB8B;;AAAA,SAmB/BY,oBAnB+B,GAmBRC,eAAe,IAAI;AACxCA,MAAAA,eAAe,CAAC;AACdC,QAAAA,QAAQ,EAAEjC,sBADI;AAEdkC,QAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,UAAAA;AAAF,SAAP,KAAgC;AAC3C,cAAI,CAACA,gBAAgB,CAACjB,IAAtB,EAA4B,OAAOgB,IAAP;AAC5B,gBAAME,OAAO,GAAGD,gBAAgB,CAACjB,IAAjB,CAAsBkB,OAAtC;AACA,gBAAMC,MAAM,GAAGH,IAAI,CAACX,IAAL,CAAUC,KAAV,CAAgBC,IAAhB,CAAqB,CAAC;AAAEE,YAAAA;AAAF,WAAD,KAAYA,EAAE,KAAKS,OAAO,CAACT,EAAhD,CAAf;AACA,cAAIU,MAAJ,EAAY,OAAOH,IAAP;AAEZ,iBAAOI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,IAAlB,EAAwB;AAC7BX,YAAAA,IAAI,EAAE;AACJC,cAAAA,KAAK,EAAE,CAACY,OAAD,EAAU,GAAGF,IAAI,CAACX,IAAL,CAAUC,KAAvB,CADH;AAEJgB,cAAAA,KAAK,EAAEN,IAAI,CAACX,IAAL,CAAUC,KAAV,CAAgBiB,MAAhB,GAAyB,CAF5B;AAGJC,cAAAA,UAAU,EAAER,IAAI,CAACX,IAAL,CAAUmB;AAHlB;AADuB,WAAxB,CAAP;AAOD;AAfa,OAAD,CAAf;AAiBD,KArC8B;;AAAA,SAuC/BC,oBAvC+B,GAuCRZ,eAAe,IAAI;AACxCA,MAAAA,eAAe,CAAC;AACdC,QAAAA,QAAQ,EAAEhC;AADI,OAAD,CAAf;AAGD,KA3C8B;;AAAA,SA6C/B4C,SA7C+B,GA6CnB1B,IAAI,IAAI;AAClB,YAAMP,IAAI,GAAGC,QAAQ,CAAC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBH,IAAzB,EAA+B,EAA/B,CAArB;;AACA,UAAIA,IAAI,IAAIO,IAAI,CAACK,IAAL,CAAUiB,KAAV,GAAkB3C,cAA9B,EAA8C;AAC5C,cAAMgD,QAAQ,GAAGlC,IAAI,GAAG,CAAxB;AACA,aAAKJ,KAAL,CAAWuC,OAAX,CAAmBC,IAAnB,CAAyB,QAAOF,QAAS,EAAzC;AACD;AACF,KAnD8B;;AAAA,SAqD/BG,aArD+B,GAqDf,MAAM;AACpB,YAAMrC,IAAI,GAAGC,QAAQ,CAAC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBH,IAAzB,EAA+B,EAA/B,CAArB;;AACA,UAAIA,IAAI,GAAG,CAAX,EAAc;AACZ,cAAMsC,YAAY,GAAGtC,IAAI,GAAG,CAA5B;AACA,aAAKJ,KAAL,CAAWuC,OAAX,CAAmBC,IAAnB,CAAyB,QAAOE,YAAa,EAA7C;AACD;AACF,KA3D8B;;AAAA,SA6D/BC,kBA7D+B,GA6DV,MAAM;AACzB,YAAM5C,SAAS,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BC,QAA7B,CAAsC,KAAtC,CAAlB;AACA,YAAMC,IAAI,GAAGC,QAAQ,CAAC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBH,IAAzB,EAA+B,EAA/B,CAArB;AAEA,YAAMI,IAAI,GAAGT,SAAS,GAAG,CAACK,IAAI,GAAG,CAAR,IAAad,cAAhB,GAAiC,CAAvD;AACA,YAAMmB,KAAK,GAAGV,SAAS,GAAGT,cAAH,GAAoB,GAA3C;AACA,YAAMoB,OAAO,GAAGX,SAAS,GAAG,gBAAH,GAAsB,IAA/C;AACA,aAAO;AAAEU,QAAAA,KAAF;AAASD,QAAAA,IAAT;AAAeE,QAAAA;AAAf,OAAP;AACD,KArE8B;;AAAA,SAuE/BkC,iBAvE+B,GAuEXjC,IAAI,IAAI;AAC1B,YAAMZ,SAAS,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BC,QAA7B,CAAsC,KAAtC,CAAlB;;AACA,UAAIJ,SAAJ,EAAe;AACb,eAAOY,IAAI,CAACK,IAAL,CAAUC,KAAjB;AACD;;AACD,YAAM4B,WAAW,GAAGlC,IAAI,CAACK,IAAL,CAAUC,KAAV,CAAgB6B,KAAhB,EAApB;AACAD,MAAAA,WAAW,CAACE,IAAZ,CAAiB,CAACC,EAAD,EAAKC,EAAL,KAAYA,EAAE,CAAC5B,KAAH,CAASa,MAAT,GAAkBc,EAAE,CAAC3B,KAAH,CAASa,MAAxD;AACA,aAAOW,WAAP;AACD,KA/E8B;AAAA;;AAiF/BK,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE3D,UAAd;AAA0B,MAAA,SAAS,EAAE,KAAKoD,kBAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAEQ,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBzC,MAAAA,IAAlB;AAAwBa,MAAAA;AAAxB,KAAD,KAA+C;AAC9C,UAAI2B,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,UAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;;AAEX,WAAK7B,oBAAL,CAA0BC,eAA1B;;AACA,WAAKY,oBAAL,CAA0BZ,eAA1B;;AAEA,YAAM6B,aAAa,GAAG,KAAKT,iBAAL,CAAuBjC,IAAvB,CAAtB;;AACA,YAAMZ,SAAS,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BC,QAA7B,CAAsC,KAAtC,CAAlB;AACA,YAAMmD,SAAS,GAAG,KAAKtD,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBH,IAAxB,GACd,CAAC,KAAKJ,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBH,IAAxB,GAA+B,CAAhC,IAAqCd,cADvB,GAEd,CAFJ;AAIA,0BACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG+D,aAAa,CAACE,GAAd,CAAkB,CAACpC,IAAD,EAAOqC,KAAP,kBACjB,oBAAC,IAAD;AACE,QAAA,GAAG,EAAErC,IAAI,CAACC,EADZ;AAEE,QAAA,IAAI,EAAED,IAFR;AAGE,QAAA,KAAK,EAAEqC,KAAK,GAAGF,SAHjB;AAIE,QAAA,oBAAoB,EAAE,KAAK3D,qBAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADH,EASGI,SAAS,iBACR;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,OAAO,EAAE,KAAK0C,aAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAyB,QAAA,OAAO,EAAE,MAAM,KAAKJ,SAAL,CAAe1B,IAAf,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CAVJ,CADF;AAsBD,KApCH,CADF;AAwCD;;AA1H8B;;AA4HjC,eAAejB,QAAf","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport Link from './Link'\r\nimport { Query } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\nimport { LINKS_PER_PAGE } from '../constants'\r\n\r\nexport const FEED_QUERY = gql`\r\n  query FeedQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\r\n    feed(first: $first, skip: $skip, orderBy: $orderBy) {\r\n      links {\r\n        id\r\n        createdAt\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      count\r\n    }\r\n  }\r\n`\r\n\r\nconst NEW_LINKS_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newLink {\r\n      id\r\n      url\r\n      description\r\n      createdAt\r\n      postedBy {\r\n        id\r\n        name\r\n      }\r\n      votes {\r\n        id\r\n        user {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst NEW_VOTES_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newVote {\r\n      id\r\n      link {\r\n        id\r\n        url\r\n        description\r\n        createdAt\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\nclass LinkList extends Component {\r\n  _updateCacheAfterVote = (store, createVote, linkId) => {\r\n    const isNewPage = this.props.location.pathname.includes('new')\r\n    const page = parseInt(this.props.match.params.page, 10)\r\n\r\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\r\n    const first = isNewPage ? LINKS_PER_PAGE : 100\r\n    const orderBy = isNewPage ? 'createdAt_DESC' : null\r\n    const data = store.readQuery({\r\n      query: FEED_QUERY,\r\n      variables: { first, skip, orderBy }\r\n    })\r\n\r\n    const votedLink = data.feed.links.find(link => link.id === linkId)\r\n    votedLink.votes = createVote.link.votes\r\n\r\n    store.writeQuery({ query: FEED_QUERY, data })\r\n  }\r\n\r\n  _subscribeToNewLinks = subscribeToMore => {\r\n    subscribeToMore({\r\n      document: NEW_LINKS_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev\r\n        const newLink = subscriptionData.data.newLink\r\n        const exists = prev.feed.links.find(({ id }) => id === newLink.id);\r\n        if (exists) return prev;\r\n\r\n        return Object.assign({}, prev, {\r\n          feed: {\r\n            links: [newLink, ...prev.feed.links],\r\n            count: prev.feed.links.length + 1,\r\n            __typename: prev.feed.__typename\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  _subscribeToNewVotes = subscribeToMore => {\r\n    subscribeToMore({\r\n      document: NEW_VOTES_SUBSCRIPTION\r\n    })\r\n  }\r\n\r\n  _nextPage = data => {\r\n    const page = parseInt(this.props.match.params.page, 10)\r\n    if (page <= data.feed.count / LINKS_PER_PAGE) {\r\n      const nextPage = page + 1\r\n      this.props.history.push(`/new/${nextPage}`)\r\n    }\r\n  }\r\n\r\n  _previousPage = () => {\r\n    const page = parseInt(this.props.match.params.page, 10)\r\n    if (page > 1) {\r\n      const previousPage = page - 1\r\n      this.props.history.push(`/new/${previousPage}`)\r\n    }\r\n  }\r\n\r\n  _getQueryVariables = () => {\r\n    const isNewPage = this.props.location.pathname.includes('new')\r\n    const page = parseInt(this.props.match.params.page, 10)\r\n\r\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\r\n    const first = isNewPage ? LINKS_PER_PAGE : 100\r\n    const orderBy = isNewPage ? 'createdAt_DESC' : null\r\n    return { first, skip, orderBy }\r\n  }\r\n\r\n  _getLinksToRender = data => {\r\n    const isNewPage = this.props.location.pathname.includes('new')\r\n    if (isNewPage) {\r\n      return data.feed.links\r\n    }\r\n    const rankedLinks = data.feed.links.slice()\r\n    rankedLinks.sort((l1, l2) => l2.votes.length - l1.votes.length)\r\n    return rankedLinks\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Query query={FEED_QUERY} variables={this._getQueryVariables()}>\r\n        {({ loading, error, data, subscribeToMore }) => {\r\n          if (loading) return <div>Fetching</div>\r\n          if (error) return <div>Error</div>\r\n\r\n          this._subscribeToNewLinks(subscribeToMore)\r\n          this._subscribeToNewVotes(subscribeToMore)\r\n\r\n          const linksToRender = this._getLinksToRender(data)\r\n          const isNewPage = this.props.location.pathname.includes('new')\r\n          const pageIndex = this.props.match.params.page\r\n            ? (this.props.match.params.page - 1) * LINKS_PER_PAGE\r\n            : 0\r\n\r\n          return (\r\n            <Fragment>\r\n              {linksToRender.map((link, index) => (\r\n                <Link\r\n                  key={link.id}\r\n                  link={link}\r\n                  index={index + pageIndex}\r\n                  updateStoreAfterVote={this._updateCacheAfterVote}\r\n                />\r\n              ))}\r\n              {isNewPage && (\r\n                <div className=\"flex ml4 mv3 gray\">\r\n                  <div className=\"pointer mr2\" onClick={this._previousPage}>\r\n                    Previous\r\n                  </div>\r\n                  <div className=\"pointer\" onClick={() => this._nextPage(data)}>\r\n                    Next\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Fragment>\r\n          )\r\n        }}\r\n      </Query>\r\n    )\r\n  }\r\n}\r\nexport default LinkList"]},"metadata":{},"sourceType":"module"}
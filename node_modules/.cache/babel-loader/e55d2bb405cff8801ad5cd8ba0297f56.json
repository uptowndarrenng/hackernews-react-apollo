{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\OUP\\\\React\\\\hackernews-react-apollo\\\\src\\\\components\\\\LinkList.js\";\nimport React, { Component } from 'react';\nimport Link from './Link';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nexport const FEED_QUERY = gql`\n  {\n    feed {\n      links {\n        id\n        createdAt\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`;\n\nclass LinkList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._updateCacheAfterVote = (store, createVote, linkId) => {\n      const data = store.readQuery({\n        query: FEED_QUERY\n      });\n      const votedLink = data.feed.links.find(link => link.id === linkId);\n      votedLink.votes = createVote.link.votes;\n      store.writeQuery({\n        query: FEED_QUERY,\n        data\n      });\n    };\n\n    this._subscribeToNewLinks = subscribeToMore => {\n      subscribeToMore({\n        document: NEW_LINKS_SUBSCRIPTION,\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const newLink = subscriptionData.data.newLink;\n          const exists = prev.feed.links.find(({\n            id\n          }) => id === newLink.id);\n          if (exists) return prev;\n          return Object.assign({}, prev, {\n            feed: {\n              links: [newLink, ...prev.feed.links],\n              count: prev.feed.links.length + 1,\n              __typename: prev.feed.__typename\n            }\n          });\n        }\n      });\n    };\n\n    this._subscribeToNewVotes = subscribeToMore => {\n      subscribeToMore({\n        document: NEW_VOTES_SUBSCRIPTION\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Query, {\n      query: FEED_QUERY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, ({\n      loading,\n      error,\n      data,\n      subscribeToMore\n    }) => {\n      if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 31\n        }\n      }, \"Fetching\");\n      if (error) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }\n      }, \"Error\");\n\n      this._subscribeToNewLinks(subscribeToMore);\n\n      this._subscribeToNewVotes(subscribeToMore);\n\n      const linksToRender = data.feed.links;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, linksToRender.map((link, index) => /*#__PURE__*/React.createElement(Link, {\n        key: link.id,\n        link: link,\n        index: index,\n        updateStoreAfterVote: this._updateCacheAfterVote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      })));\n    });\n  }\n\n}\n\nexport default LinkList;","map":{"version":3,"sources":["E:/Project/OUP/React/hackernews-react-apollo/src/components/LinkList.js"],"names":["React","Component","Link","Query","gql","FEED_QUERY","NEW_LINKS_SUBSCRIPTION","LinkList","_updateCacheAfterVote","store","createVote","linkId","data","readQuery","query","votedLink","feed","links","find","link","id","votes","writeQuery","_subscribeToNewLinks","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","exists","Object","assign","count","length","__typename","_subscribeToNewVotes","NEW_VOTES_SUBSCRIPTION","render","loading","error","linksToRender","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Link from './Link'\r\nimport { Query } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\n\r\nexport const FEED_QUERY = gql`\r\n  {\r\n    feed {\r\n      links {\r\n        id\r\n        createdAt\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nconst NEW_LINKS_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newLink {\r\n      id\r\n      url\r\n      description\r\n      createdAt\r\n      postedBy {\r\n        id\r\n        name\r\n      }\r\n      votes {\r\n        id\r\n        user {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nclass LinkList extends Component {\r\n  _updateCacheAfterVote = (store, createVote, linkId) => {\r\n    const data = store.readQuery({ query: FEED_QUERY })\r\n\r\n    const votedLink = data.feed.links.find(link => link.id === linkId)\r\n    votedLink.votes = createVote.link.votes\r\n\r\n    store.writeQuery({ query: FEED_QUERY, data })\r\n  }\r\n\r\n  _subscribeToNewLinks = subscribeToMore => {\r\n    subscribeToMore({\r\n      document: NEW_LINKS_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev\r\n        const newLink = subscriptionData.data.newLink\r\n        const exists = prev.feed.links.find(({ id }) => id === newLink.id);\r\n        if (exists) return prev;\r\n  \r\n        return Object.assign({}, prev, {\r\n          feed: {\r\n            links: [newLink, ...prev.feed.links],\r\n            count: prev.feed.links.length + 1,\r\n            __typename: prev.feed.__typename\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  _subscribeToNewVotes = subscribeToMore => {\r\n    subscribeToMore({\r\n      document: NEW_VOTES_SUBSCRIPTION\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Query query={FEED_QUERY}>\r\n        {({ loading, error, data, subscribeToMore }) => {\r\n          if (loading) return <div>Fetching</div>\r\n          if (error) return <div>Error</div>\r\n\r\n          this._subscribeToNewLinks(subscribeToMore)\r\n          this._subscribeToNewVotes(subscribeToMore)\r\n          \r\n          const linksToRender = data.feed.links\r\n\r\n          return (\r\n            <div>\r\n              {linksToRender.map((link, index) => (\r\n                <Link\r\n                  key={link.id}\r\n                  link={link}\r\n                  index={index}\r\n                  updateStoreAfterVote={this._updateCacheAfterVote}\r\n                />\r\n              ))}\r\n            </div>\r\n          )\r\n        }}\r\n      </Query>\r\n    )\r\n  }\r\n}\r\nexport default LinkList"]},"metadata":{},"sourceType":"module"}